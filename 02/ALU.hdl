// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // ==================================================================================
    // zx, nz
    // ==================================================================================
    Zero16SelIs1(in=x, sel=zx, out=zeroX); // zeroX = (zx == 1) ? 0 : x
    Negate16SelIs1(in=zeroX, sel=nx, out=negX); // negX = (nx == 1) ? -zeroX : zeroX
    // ==================================================================================
    // zy, ny
    // ==================================================================================
    Zero16SelIs1(in=y, sel=zy, out=zeroY); // zeroY = (zy == 1) ? 0 : y
    Negate16SelIs1(in=zeroY, sel=ny, out=negY); // negY = (ny == 1) ? -zeroY : zeroY
    // ==================================================================================
    // f
    // ==================================================================================
    // If f == 1, out = x + y
    // otherwise, out = x & y
    Add16(a=negX, b=negY, out=addOut); // addOut = negX + negY
    And16(a=negX, b=negY, out=andOut); // andOut = negX & negY
    Mux16(a=andOut, b=addOut, sel=f, out=fout); // out = (f == 1) ? addOut : andOut
    // ==================================================================================
    // no
    // ==================================================================================
    Not16(in=fout, out=notOut); // notOut = (no == 1) ? !fout : fout
    Mux16(a=fout, b=notOut, sel=no, out=out, out[0..15]=outZr, out[15]=ng); // out = (no == 1) ? notOut : fout
    // ==================================================================================
    // zr, ng
    // ==================================================================================
    // Can't use out directly
    // (error): Can't connect gate's output pin to part: load ALU.hdl 
    // so use outZr instead
    Or16Way(in=outZr, out=orOut); // orOut1 = out[0] | out[1] | ... | out[7] | out[8] | ... | out[15]
    Not(in=orOut, out=zr); // zr = (orOut == 0) ? 1 : 0
}